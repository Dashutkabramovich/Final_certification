import allure
import requests
import pytest

base_url = "https://www.chitai-gorod.ru"

@allure.title("–ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É")
@allure.feature("READ")
@allure.severity("blocker")
@pytest.mark.positive_test
def test_russian_lang():
    with allure.step("api. –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=–≥–∞—Ä—Ä–∏')
        assert resp.status_code == 200
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"

@allure.title("–ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å–ª–æ–≤–∞–º")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å–ª–æ–≤–∞–º")
@allure.feature("READ")
@allure.severity("blocker")
@pytest.mark.positive_test
def test_russian_lang_two_words():
    with allure.step("api. –ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å–ª–æ–≤–∞–º —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=–≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä')
        assert resp.status_code == 200
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"

@allure.title("–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É")
@allure.feature("READ")
@allure.severity("critical")
@pytest.mark.positive_test
def test_author():
    with allure.step("api. –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥')
        assert resp.status_code == 200
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"

@allure.title("–ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–∏")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ —Å–µ—Ä–∏–∏")
@allure.feature("READ")
@allure.severity("critical")
@pytest.mark.positive_test
def test_series():
    with allure.step("api. –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–∏ —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=–î–æ–∑–æ—Ä—ã')
        assert resp.status_code == 200
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"

@allure.title("–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É")
@allure.feature("READ")
@allure.severity("critical")
@pytest.mark.positive_test
def test_genre():
    with allure.step("api. –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=–õ—é–±–æ–≤–Ω—ã–π —Ä–æ–º–∞–Ω')
        assert resp.status_code == 200
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"

@allure.title("–ü–æ–∏—Å–∫ –ø–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
@allure.feature("READ")
@allure.severity("critical")
@pytest.mark.positive_test
def test_eng():
    with allure.step("api. –ü–æ–∏—Å–∫ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=Harry Potter')
        assert resp.status_code == 200
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"

@allure.title("–ü–æ–∏—Å–∫ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ")
@allure.feature("READ")
@allure.severity("blocker")
@pytest.mark.positive_test
def test_alt_products():
    with allure.step("api. –ü–æ–∏—Å–∫ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è')
        assert resp.status_code == 200
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"

@allure.title("–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ —Å DELETE")
@allure.description("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ —Å –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –º–µ—Ç–æ–¥–æ–º DELETE")
@allure.feature("DELETE")
@allure.severity("trivial")
@pytest.mark.negative_test
def test_alt_products_del():
    with allure.step("api. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –º–µ—Ç–æ–¥–æ–º DELETE —á–µ—Ä–µ–∑ API"):
        resp = requests.delete(base_url+'/search?phrase=–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è')
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8" 
        if resp.status_code == 200:
            print('Success')  
        elif resp.status_code == 404:
            print('Not Found')

@allure.title("–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∞–π—Ç –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
@allure.feature("READ")
@allure.severity("minor")
@pytest.mark.negative_test
def test_hieroglyphs():
    with allure.step("api. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º–∏ —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=·Øì·°£ê≠©êôöÀö‚Äß ‡≠®‡≠ß')
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"
        assert '–ü–æ—Ö–æ–∂–µ, —É&nbsp;–Ω–∞—Å —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç' in resp.text 

@allure.title("–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∞–π—Ç –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è")
@allure.feature("READ")
@allure.severity("minor")
@pytest.mark.negative_test
def test_coma():
    with allure.step("api. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=!.,.?')
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"
        assert '–ü–æ—Ö–æ–∂–µ, —É&nbsp;–Ω–∞—Å —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç' in resp.text 

@allure.title("–ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è '–ü–æ—Ö–æ–∂–µ, —É –Ω–∞—Å —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç' –ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ")
@allure.feature("READ")
@allure.severity("blocker")
@pytest.mark.negative_test
def test_empty():
    with allure.step("api. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π '–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å' –∏–ª–∏'–£ –Ω–∞—Å —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç'—á–µ—Ä–µ–∑ API"):
        resp = requests.get(base_url+'/search?phrase=')
        assert resp.headers["Content-Type"] == "text/html; charset=utf-8"
        if '–í—ã, –≤–≤–µ–ª–∏&nbsp;–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å' in resp.text:
            print('Success')  
        elif '–ü–æ—Ö–æ–∂–µ, —É&nbsp;–Ω–∞—Å —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç' in resp.text:
            print('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')